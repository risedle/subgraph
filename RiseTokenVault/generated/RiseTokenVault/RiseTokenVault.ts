// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class FeeCollected extends ethereum.Event {
  get params(): FeeCollected__Params {
    return new FeeCollected__Params(this);
  }
}

export class FeeCollected__Params {
  _event: FeeCollected;

  constructor(event: FeeCollected) {
    this._event = event;
  }

  get collector(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get total(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get feeRecipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class FeeRecipientUpdated extends ethereum.Event {
  get params(): FeeRecipientUpdated__Params {
    return new FeeRecipientUpdated__Params(this);
  }
}

export class FeeRecipientUpdated__Params {
  _event: FeeRecipientUpdated;

  constructor(event: FeeRecipientUpdated) {
    this._event = event;
  }

  get updater(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newFeeRecipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class InterestAccrued extends ethereum.Event {
  get params(): InterestAccrued__Params {
    return new InterestAccrued__Params(this);
  }
}

export class InterestAccrued__Params {
  _event: InterestAccrued;

  constructor(event: InterestAccrued) {
    this._event = event;
  }

  get previousTimestamp(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get currentTimestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get previousVaultTotalOutstandingDebt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get previousVaultTotalPendingFees(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get borrowRatePerSecondInEther(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get elapsedSeconds(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get interestAmount(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get totalOutstandingDebt(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get totalPendingFees(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class MaxTotalCollateralUpdated extends ethereum.Event {
  get params(): MaxTotalCollateralUpdated__Params {
    return new MaxTotalCollateralUpdated__Params(this);
  }
}

export class MaxTotalCollateralUpdated__Params {
  _event: MaxTotalCollateralUpdated;

  constructor(event: MaxTotalCollateralUpdated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newMaxTotalCollateral(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OracleContractUpdated extends ethereum.Event {
  get params(): OracleContractUpdated__Params {
    return new OracleContractUpdated__Params(this);
  }
}

export class OracleContractUpdated__Params {
  _event: OracleContractUpdated;

  constructor(event: OracleContractUpdated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oracle(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ParametersUpdated extends ethereum.Event {
  get params(): ParametersUpdated__Params {
    return new ParametersUpdated__Params(this);
  }
}

export class ParametersUpdated__Params {
  _event: ParametersUpdated;

  constructor(event: ParametersUpdated) {
    this._event = event;
  }

  get updater(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get u(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get s1(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get s2(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get mr(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class RiseTokenBurned extends ethereum.Event {
  get params(): RiseTokenBurned__Params {
    return new RiseTokenBurned__Params(this);
  }
}

export class RiseTokenBurned__Params {
  _event: RiseTokenBurned;

  constructor(event: RiseTokenBurned) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get riseToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get redeemedAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RiseTokenCreated extends ethereum.Event {
  get params(): RiseTokenCreated__Params {
    return new RiseTokenCreated__Params(this);
  }
}

export class RiseTokenCreated__Params {
  _event: RiseTokenCreated;

  constructor(event: RiseTokenCreated) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RiseTokenMinted extends ethereum.Event {
  get params(): RiseTokenMinted__Params {
    return new RiseTokenMinted__Params(this);
  }
}

export class RiseTokenMinted__Params {
  _event: RiseTokenMinted;

  constructor(event: RiseTokenMinted) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get riseToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get mintedAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RiseTokenRebalanced extends ethereum.Event {
  get params(): RiseTokenRebalanced__Params {
    return new RiseTokenRebalanced__Params(this);
  }
}

export class RiseTokenRebalanced__Params {
  _event: RiseTokenRebalanced;

  constructor(event: RiseTokenRebalanced) {
    this._event = event;
  }

  get executor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get previousLeverageRatioInEther(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SupplyAdded extends ethereum.Event {
  get params(): SupplyAdded__Params {
    return new SupplyAdded__Params(this);
  }
}

export class SupplyAdded__Params {
  _event: SupplyAdded;

  constructor(event: SupplyAdded) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ExchangeRateInEther(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get mintedAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SupplyRemoved extends ethereum.Event {
  get params(): SupplyRemoved__Params {
    return new SupplyRemoved__Params(this);
  }
}

export class SupplyRemoved__Params {
  _event: SupplyRemoved;

  constructor(event: SupplyRemoved) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get ExchangeRateInEther(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get redeemedAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SwapContractUpdated extends ethereum.Event {
  get params(): SwapContractUpdated__Params {
    return new SwapContractUpdated__Params(this);
  }
}

export class SwapContractUpdated__Params {
  _event: SwapContractUpdated;

  constructor(event: SwapContractUpdated) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get swap(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RiseTokenVault__getMetadataResultValue0Struct extends ethereum.Tuple {
  get isETH(): boolean {
    return this[0].toBoolean();
  }

  get token(): Address {
    return this[1].toAddress();
  }

  get collateral(): Address {
    return this[2].toAddress();
  }

  get oracleContract(): Address {
    return this[3].toAddress();
  }

  get swapContract(): Address {
    return this[4].toAddress();
  }

  get maxSwapSlippageInEther(): BigInt {
    return this[5].toBigInt();
  }

  get initialPrice(): BigInt {
    return this[6].toBigInt();
  }

  get feeInEther(): BigInt {
    return this[7].toBigInt();
  }

  get totalCollateralPlusFee(): BigInt {
    return this[8].toBigInt();
  }

  get totalPendingFees(): BigInt {
    return this[9].toBigInt();
  }

  get minLeverageRatioInEther(): BigInt {
    return this[10].toBigInt();
  }

  get maxLeverageRatioInEther(): BigInt {
    return this[11].toBigInt();
  }

  get maxRebalancingValue(): BigInt {
    return this[12].toBigInt();
  }

  get rebalancingStepInEther(): BigInt {
    return this[13].toBigInt();
  }

  get maxTotalCollateral(): BigInt {
    return this[14].toBigInt();
  }
}

export class RiseTokenVault__getVaultParametersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  get_optimalUtilizationRateInEther(): BigInt {
    return this.value0;
  }

  get_interestSlope1InEther(): BigInt {
    return this.value1;
  }

  get_interestSlope2InEther(): BigInt {
    return this.value2;
  }

  get_maxBorrowRatePerSecondInEther(): BigInt {
    return this.value3;
  }

  get_performanceFeeInEther(): BigInt {
    return this.value4;
  }
}

export class RiseTokenVault extends ethereum.SmartContract {
  static bind(address: Address): RiseTokenVault {
    return new RiseTokenVault("RiseTokenVault", address);
  }

  FEE_RECIPIENT(): Address {
    let result = super.call("FEE_RECIPIENT", "FEE_RECIPIENT():(address)", []);

    return result[0].toAddress();
  }

  try_FEE_RECIPIENT(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "FEE_RECIPIENT",
      "FEE_RECIPIENT():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getBorrowRatePerSecondInEther(): BigInt {
    let result = super.call(
      "getBorrowRatePerSecondInEther",
      "getBorrowRatePerSecondInEther():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getBorrowRatePerSecondInEther(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBorrowRatePerSecondInEther",
      "getBorrowRatePerSecondInEther():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCollateralPerRiseToken(token: Address): BigInt {
    let result = super.call(
      "getCollateralPerRiseToken",
      "getCollateralPerRiseToken(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getCollateralPerRiseToken(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCollateralPerRiseToken",
      "getCollateralPerRiseToken(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDebtPerRiseToken(token: Address): BigInt {
    let result = super.call(
      "getDebtPerRiseToken",
      "getDebtPerRiseToken(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getDebtPerRiseToken(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDebtPerRiseToken",
      "getDebtPerRiseToken(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExchangeRateInEther(): BigInt {
    let result = super.call(
      "getExchangeRateInEther",
      "getExchangeRateInEther():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getExchangeRateInEther(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getExchangeRateInEther",
      "getExchangeRateInEther():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLeverageRatioInEther(token: Address): BigInt {
    let result = super.call(
      "getLeverageRatioInEther",
      "getLeverageRatioInEther(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getLeverageRatioInEther(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLeverageRatioInEther",
      "getLeverageRatioInEther(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMetadata(token: Address): RiseTokenVault__getMetadataResultValue0Struct {
    let result = super.call(
      "getMetadata",
      "getMetadata(address):((bool,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(token)]
    );

    return changetype<RiseTokenVault__getMetadataResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getMetadata(
    token: Address
  ): ethereum.CallResult<RiseTokenVault__getMetadataResultValue0Struct> {
    let result = super.tryCall(
      "getMetadata",
      "getMetadata(address):((bool,address,address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<RiseTokenVault__getMetadataResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getNAV(token: Address): BigInt {
    let result = super.call("getNAV", "getNAV(address):(uint256)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBigInt();
  }

  try_getNAV(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNAV", "getNAV(address):(uint256)", [
      ethereum.Value.fromAddress(token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOutstandingDebt(token: Address): BigInt {
    let result = super.call(
      "getOutstandingDebt",
      "getOutstandingDebt(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getOutstandingDebt(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOutstandingDebt",
      "getOutstandingDebt(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getSupplyRatePerSecondInEther(): BigInt {
    let result = super.call(
      "getSupplyRatePerSecondInEther",
      "getSupplyRatePerSecondInEther():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getSupplyRatePerSecondInEther(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSupplyRatePerSecondInEther",
      "getSupplyRatePerSecondInEther():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalAvailableCash(): BigInt {
    let result = super.call(
      "getTotalAvailableCash",
      "getTotalAvailableCash():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTotalAvailableCash(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalAvailableCash",
      "getTotalAvailableCash():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUnderlying(): Address {
    let result = super.call("getUnderlying", "getUnderlying():(address)", []);

    return result[0].toAddress();
  }

  try_getUnderlying(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getUnderlying",
      "getUnderlying():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getUtilizationRateInEther(): BigInt {
    let result = super.call(
      "getUtilizationRateInEther",
      "getUtilizationRateInEther():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getUtilizationRateInEther(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUtilizationRateInEther",
      "getUtilizationRateInEther():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVaultParameters(): RiseTokenVault__getVaultParametersResult {
    let result = super.call(
      "getVaultParameters",
      "getVaultParameters():(uint256,uint256,uint256,uint256,uint256)",
      []
    );

    return new RiseTokenVault__getVaultParametersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getVaultParameters(): ethereum.CallResult<
    RiseTokenVault__getVaultParametersResult
  > {
    let result = super.tryCall(
      "getVaultParameters",
      "getVaultParameters():(uint256,uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RiseTokenVault__getVaultParametersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxTotalDeposit(): BigInt {
    let result = super.call(
      "maxTotalDeposit",
      "maxTotalDeposit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxTotalDeposit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxTotalDeposit",
      "maxTotalDeposit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalOutstandingDebt(): BigInt {
    let result = super.call(
      "totalOutstandingDebt",
      "totalOutstandingDebt():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalOutstandingDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalOutstandingDebt",
      "totalOutstandingDebt():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalPendingFees(): BigInt {
    let result = super.call(
      "totalPendingFees",
      "totalPendingFees():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalPendingFees(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalPendingFees",
      "totalPendingFees():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get underlying(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get feeRecipient(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AccrueInterestCall extends ethereum.Call {
  get inputs(): AccrueInterestCall__Inputs {
    return new AccrueInterestCall__Inputs(this);
  }

  get outputs(): AccrueInterestCall__Outputs {
    return new AccrueInterestCall__Outputs(this);
  }
}

export class AccrueInterestCall__Inputs {
  _call: AccrueInterestCall;

  constructor(call: AccrueInterestCall) {
    this._call = call;
  }
}

export class AccrueInterestCall__Outputs {
  _call: AccrueInterestCall;

  constructor(call: AccrueInterestCall) {
    this._call = call;
  }
}

export class AddSupplyCall extends ethereum.Call {
  get inputs(): AddSupplyCall__Inputs {
    return new AddSupplyCall__Inputs(this);
  }

  get outputs(): AddSupplyCall__Outputs {
    return new AddSupplyCall__Outputs(this);
  }
}

export class AddSupplyCall__Inputs {
  _call: AddSupplyCall;

  constructor(call: AddSupplyCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddSupplyCall__Outputs {
  _call: AddSupplyCall;

  constructor(call: AddSupplyCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CollectPendingFeesCall extends ethereum.Call {
  get inputs(): CollectPendingFeesCall__Inputs {
    return new CollectPendingFeesCall__Inputs(this);
  }

  get outputs(): CollectPendingFeesCall__Outputs {
    return new CollectPendingFeesCall__Outputs(this);
  }
}

export class CollectPendingFeesCall__Inputs {
  _call: CollectPendingFeesCall;

  constructor(call: CollectPendingFeesCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CollectPendingFeesCall__Outputs {
  _call: CollectPendingFeesCall;

  constructor(call: CollectPendingFeesCall) {
    this._call = call;
  }
}

export class CollectVaultPendingFeesCall extends ethereum.Call {
  get inputs(): CollectVaultPendingFeesCall__Inputs {
    return new CollectVaultPendingFeesCall__Inputs(this);
  }

  get outputs(): CollectVaultPendingFeesCall__Outputs {
    return new CollectVaultPendingFeesCall__Outputs(this);
  }
}

export class CollectVaultPendingFeesCall__Inputs {
  _call: CollectVaultPendingFeesCall;

  constructor(call: CollectVaultPendingFeesCall) {
    this._call = call;
  }
}

export class CollectVaultPendingFeesCall__Outputs {
  _call: CollectVaultPendingFeesCall;

  constructor(call: CollectVaultPendingFeesCall) {
    this._call = call;
  }
}

export class CreateCall extends ethereum.Call {
  get inputs(): CreateCall__Inputs {
    return new CreateCall__Inputs(this);
  }

  get outputs(): CreateCall__Outputs {
    return new CreateCall__Outputs(this);
  }
}

export class CreateCall__Inputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get isETH(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get tokenRiseAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get collateral(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get oracleContract(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get swapContract(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get maxSwapSlippageInEther(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get initialPrice(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get feeInEther(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get minLeverageRatioInEther(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get maxLeverageRatioInEther(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }

  get maxRebalancingValue(): BigInt {
    return this._call.inputValues[10].value.toBigInt();
  }

  get rebalancingStepInEther(): BigInt {
    return this._call.inputValues[11].value.toBigInt();
  }
}

export class CreateCall__Outputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class Mint1Call extends ethereum.Call {
  get inputs(): Mint1Call__Inputs {
    return new Mint1Call__Inputs(this);
  }

  get outputs(): Mint1Call__Outputs {
    return new Mint1Call__Outputs(this);
  }
}

export class Mint1Call__Inputs {
  _call: Mint1Call;

  constructor(call: Mint1Call) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Mint1Call__Outputs {
  _call: Mint1Call;

  constructor(call: Mint1Call) {
    this._call = call;
  }
}

export class Mint2Call extends ethereum.Call {
  get inputs(): Mint2Call__Inputs {
    return new Mint2Call__Inputs(this);
  }

  get outputs(): Mint2Call__Outputs {
    return new Mint2Call__Outputs(this);
  }
}

export class Mint2Call__Inputs {
  _call: Mint2Call;

  constructor(call: Mint2Call) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class Mint2Call__Outputs {
  _call: Mint2Call;

  constructor(call: Mint2Call) {
    this._call = call;
  }
}

export class Mint3Call extends ethereum.Call {
  get inputs(): Mint3Call__Inputs {
    return new Mint3Call__Inputs(this);
  }

  get outputs(): Mint3Call__Outputs {
    return new Mint3Call__Outputs(this);
  }
}

export class Mint3Call__Inputs {
  _call: Mint3Call;

  constructor(call: Mint3Call) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class Mint3Call__Outputs {
  _call: Mint3Call;

  constructor(call: Mint3Call) {
    this._call = call;
  }
}

export class RebalanceCall extends ethereum.Call {
  get inputs(): RebalanceCall__Inputs {
    return new RebalanceCall__Inputs(this);
  }

  get outputs(): RebalanceCall__Outputs {
    return new RebalanceCall__Outputs(this);
  }
}

export class RebalanceCall__Inputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RebalanceCall__Outputs {
  _call: RebalanceCall;

  constructor(call: RebalanceCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class RemoveSupplyCall extends ethereum.Call {
  get inputs(): RemoveSupplyCall__Inputs {
    return new RemoveSupplyCall__Inputs(this);
  }

  get outputs(): RemoveSupplyCall__Outputs {
    return new RemoveSupplyCall__Outputs(this);
  }
}

export class RemoveSupplyCall__Inputs {
  _call: RemoveSupplyCall;

  constructor(call: RemoveSupplyCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveSupplyCall__Outputs {
  _call: RemoveSupplyCall;

  constructor(call: RemoveSupplyCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetFeeRecipientCall extends ethereum.Call {
  get inputs(): SetFeeRecipientCall__Inputs {
    return new SetFeeRecipientCall__Inputs(this);
  }

  get outputs(): SetFeeRecipientCall__Outputs {
    return new SetFeeRecipientCall__Outputs(this);
  }
}

export class SetFeeRecipientCall__Inputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeRecipientCall__Outputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }
}

export class SetMaxTotalCollateralCall extends ethereum.Call {
  get inputs(): SetMaxTotalCollateralCall__Inputs {
    return new SetMaxTotalCollateralCall__Inputs(this);
  }

  get outputs(): SetMaxTotalCollateralCall__Outputs {
    return new SetMaxTotalCollateralCall__Outputs(this);
  }
}

export class SetMaxTotalCollateralCall__Inputs {
  _call: SetMaxTotalCollateralCall;

  constructor(call: SetMaxTotalCollateralCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get maxTotalCollateral(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetMaxTotalCollateralCall__Outputs {
  _call: SetMaxTotalCollateralCall;

  constructor(call: SetMaxTotalCollateralCall) {
    this._call = call;
  }
}

export class SetOracleContractCall extends ethereum.Call {
  get inputs(): SetOracleContractCall__Inputs {
    return new SetOracleContractCall__Inputs(this);
  }

  get outputs(): SetOracleContractCall__Outputs {
    return new SetOracleContractCall__Outputs(this);
  }
}

export class SetOracleContractCall__Inputs {
  _call: SetOracleContractCall;

  constructor(call: SetOracleContractCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newOracle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetOracleContractCall__Outputs {
  _call: SetOracleContractCall;

  constructor(call: SetOracleContractCall) {
    this._call = call;
  }
}

export class SetSwapContractCall extends ethereum.Call {
  get inputs(): SetSwapContractCall__Inputs {
    return new SetSwapContractCall__Inputs(this);
  }

  get outputs(): SetSwapContractCall__Outputs {
    return new SetSwapContractCall__Outputs(this);
  }
}

export class SetSwapContractCall__Inputs {
  _call: SetSwapContractCall;

  constructor(call: SetSwapContractCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newSwap(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetSwapContractCall__Outputs {
  _call: SetSwapContractCall;

  constructor(call: SetSwapContractCall) {
    this._call = call;
  }
}

export class SetVaultMaxTotalDepositCall extends ethereum.Call {
  get inputs(): SetVaultMaxTotalDepositCall__Inputs {
    return new SetVaultMaxTotalDepositCall__Inputs(this);
  }

  get outputs(): SetVaultMaxTotalDepositCall__Outputs {
    return new SetVaultMaxTotalDepositCall__Outputs(this);
  }
}

export class SetVaultMaxTotalDepositCall__Inputs {
  _call: SetVaultMaxTotalDepositCall;

  constructor(call: SetVaultMaxTotalDepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetVaultMaxTotalDepositCall__Outputs {
  _call: SetVaultMaxTotalDepositCall;

  constructor(call: SetVaultMaxTotalDepositCall) {
    this._call = call;
  }
}

export class SetVaultParametersCall extends ethereum.Call {
  get inputs(): SetVaultParametersCall__Inputs {
    return new SetVaultParametersCall__Inputs(this);
  }

  get outputs(): SetVaultParametersCall__Outputs {
    return new SetVaultParametersCall__Outputs(this);
  }
}

export class SetVaultParametersCall__Inputs {
  _call: SetVaultParametersCall;

  constructor(call: SetVaultParametersCall) {
    this._call = call;
  }

  get u(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get s1(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get s2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get mr(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get fee(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SetVaultParametersCall__Outputs {
  _call: SetVaultParametersCall;

  constructor(call: SetVaultParametersCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
