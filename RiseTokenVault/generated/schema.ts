// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class MintEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MintEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MintEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MintEntity", id.toString(), this);
    }
  }

  static load(id: string): MintEntity | null {
    return changetype<MintEntity | null>(store.get("MintEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get riseToken(): Bytes {
    let value = this.get("riseToken");
    return value!.toBytes();
  }

  set riseToken(value: Bytes) {
    this.set("riseToken", Value.fromBytes(value));
  }

  get amountETH(): BigInt {
    let value = this.get("amountETH");
    return value!.toBigInt();
  }

  set amountETH(value: BigInt) {
    this.set("amountETH", Value.fromBigInt(value));
  }

  get amountRISE(): BigInt {
    let value = this.get("amountRISE");
    return value!.toBigInt();
  }

  set amountRISE(value: BigInt) {
    this.set("amountRISE", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class RedeemEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RedeemEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RedeemEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RedeemEntity", id.toString(), this);
    }
  }

  static load(id: string): RedeemEntity | null {
    return changetype<RedeemEntity | null>(store.get("RedeemEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get riseToken(): Bytes {
    let value = this.get("riseToken");
    return value!.toBytes();
  }

  set riseToken(value: Bytes) {
    this.set("riseToken", Value.fromBytes(value));
  }

  get inputFunction(): Bytes {
    let value = this.get("inputFunction");
    return value!.toBytes();
  }

  set inputFunction(value: Bytes) {
    this.set("inputFunction", Value.fromBytes(value));
  }

  get amountETH(): BigInt {
    let value = this.get("amountETH");
    return value!.toBigInt();
  }

  set amountETH(value: BigInt) {
    this.set("amountETH", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class RevenueEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RevenueEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type RevenueEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RevenueEntity", id.toString(), this);
    }
  }

  static load(id: string): RevenueEntity | null {
    return changetype<RevenueEntity | null>(store.get("RevenueEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collector(): Bytes {
    let value = this.get("collector");
    return value!.toBytes();
  }

  set collector(value: Bytes) {
    this.set("collector", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    return value!.toBytes();
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}
